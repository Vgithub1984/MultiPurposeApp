import PDFKit
import UIKit

class AppNavigationFlowPDFCreator {
    static func createPDF() -> Data {
        let pdfMetaData = [
            kCGPDFContextCreator: "AppNavigationFlowPDFCreator",
            kCGPDFContextAuthor: "App Documentation",
            kCGPDFContextTitle: "App Navigation Flow Chart"
        ]
        let format = UIGraphicsPDFRendererFormat()
        format.documentInfo = pdfMetaData as [String: Any]
        
        // Page size: A4 Portrait
        let pageWidth = 595.2
        let pageHeight = 841.8
        let pageRect = CGRect(x: 0, y: 0, width: pageWidth, height: pageHeight)
        
        let renderer = UIGraphicsPDFRenderer(bounds: pageRect, format: format)
        
        let data = renderer.pdfData { ctx in
            ctx.beginPage()
            let context = ctx.cgContext
            
            // Draw title
            let title = "App Navigation Flow Chart"
            let titleFont = UIFont.boldSystemFont(ofSize: 28)
            let titleAttributes: [NSAttributedString.Key: Any] = [
                .font: titleFont,
                .foregroundColor: UIColor.black
            ]
            let titleSize = title.size(withAttributes: titleAttributes)
            let titlePoint = CGPoint(x: (pageWidth - titleSize.width)/2, y: 40)
            title.draw(at: titlePoint, withAttributes: titleAttributes)
            
            // General layout constants
            let nodeWidth: CGFloat = 220
            let nodeHeight: CGFloat = 50
            let nodeCornerRadius: CGFloat = 8
            let verticalSpacing: CGFloat = 50
            let horizontalMargin: CGFloat = 40
            
            // Font for nodes
            let nodeFont = UIFont.systemFont(ofSize: 14)
            let nodeFontBold = UIFont.boldSystemFont(ofSize: 14)
            let textColor = UIColor.black
            
            // Arrow style
            context.setLineWidth(1.5)
            context.setStrokeColor(UIColor.darkGray.cgColor)
            context.setFillColor(UIColor.darkGray.cgColor)
            
            // Convenience function: Draw rounded rect with text centered
            func drawNode(text: String,
                          at point: CGPoint,
                          width: CGFloat = nodeWidth,
                          height: CGFloat = nodeHeight,
                          fillColor: UIColor = UIColor.systemGray6,
                          bold: Bool = false) {
                let rect = CGRect(x: point.x, y: point.y, width: width, height: height)
                let path = UIBezierPath(roundedRect: rect, cornerRadius: nodeCornerRadius)
                fillColor.setFill()
                path.fill()
                
                let fontToUse = bold ? nodeFontBold : nodeFont
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.lineBreakMode = .byWordWrapping
                
                let attributes: [NSAttributedString.Key: Any] = [
                    .font: fontToUse,
                    .foregroundColor: textColor,
                    .paragraphStyle: paragraphStyle
                ]
                let attributedText = NSAttributedString(string: text, attributes: attributes)
                
                // Calculate text rect to center vertically & horizontally
                let textRect = CGRect(x: rect.minX + 10, y: rect.minY + (height - 40)/2, width: width - 20, height: 40)
                attributedText.draw(in: textRect)
            }
            
            // Convenience function: Draw arrow from bottom center of fromRect to top center of toRect
            func drawArrow(from fromRect: CGRect, to toRect: CGRect) {
                let startX = fromRect.midX
                let startY = fromRect.maxY
                let endX = toRect.midX
                let endY = toRect.minY
                
                // Draw line
                context.beginPath()
                context.move(to: CGPoint(x: startX, y: startY))
                context.addLine(to: CGPoint(x: endX, y: endY - 10))
                context.strokePath()
                
                // Draw arrowhead (triangle)
                let arrowSize: CGFloat = 7
                context.beginPath()
                context.move(to: CGPoint(x: endX, y: endY))
                context.addLine(to: CGPoint(x: endX - arrowSize, y: endY - 10))
                context.addLine(to: CGPoint(x: endX + arrowSize, y: endY - 10))
                context.closePath()
                context.fillPath()
            }
            
            // Convenience function: Draw horizontal arrow from right center of fromRect to left center of toRect
            func drawHorizontalArrow(from fromRect: CGRect, to toRect: CGRect) {
                let startX = fromRect.maxX
                let startY = fromRect.midY
                let endX = toRect.minX
                let endY = toRect.midY
                
                // Draw line
                context.beginPath()
                context.move(to: CGPoint(x: startX, y: startY))
                context.addLine(to: CGPoint(x: endX - 10, y: endY))
                context.strokePath()
                
                // Draw arrowhead (triangle)
                let arrowSize: CGFloat = 7
                context.beginPath()
                context.move(to: CGPoint(x: endX, y: endY))
                context.addLine(to: CGPoint(x: endX - 10, y: endY - arrowSize))
                context.addLine(to: CGPoint(x: endX - 10, y: endY + arrowSize))
                context.closePath()
                context.fillPath()
            }
            
            // Convenience function: Draw vertical dashed line (for arrows returning back to origin)
            func drawVerticalDashedArrow(from start: CGPoint, to end: CGPoint) {
                let arrowSize: CGFloat = 6
                let dashLengths: [CGFloat] = [4, 3]
                
                context.saveGState()
                context.setStrokeColor(UIColor.gray.cgColor)
                context.setLineWidth(1)
                context.setLineDash(phase: 0, lengths: dashLengths)
                context.beginPath()
                context.move(to: start)
                context.addLine(to: end)
                context.strokePath()
                context.restoreGState()
                
                // Draw arrowhead
                context.beginPath()
                if start.y < end.y {
                    // arrow pointing down
                    context.move(to: CGPoint(x: end.x, y: end.y))
                    context.addLine(to: CGPoint(x: end.x - arrowSize, y: end.y - arrowSize))
                    context.addLine(to: CGPoint(x: end.x + arrowSize, y: end.y - arrowSize))
                } else {
                    // arrow pointing up
                    context.move(to: CGPoint(x: end.x, y: end.y))
                    context.addLine(to: CGPoint(x: end.x - arrowSize, y: end.y + arrowSize))
                    context.addLine(to: CGPoint(x: end.x + arrowSize, y: end.y + arrowSize))
                }
                context.closePath()
                context.fillPath()
            }
            
            // Layout positioning start Y:
            var currentY: CGFloat = titlePoint.y + titleSize.height + 50
            
            // 1. App Launch → Landing Screen (ContentView)
            let appLaunchPoint = CGPoint(x: (pageWidth - nodeWidth)/2, y: currentY)
            drawNode(text: "App Launch\n→ Landing Screen (ContentView)", at: appLaunchPoint, bold: true)
            let appLaunchRect = CGRect(origin: appLaunchPoint, size: CGSize(width: nodeWidth, height: nodeHeight))
            currentY += nodeHeight + verticalSpacing
            
            // 2. Get Started → Authentication Sheet
            let getStartedPoint = CGPoint(x: appLaunchPoint.x, y: currentY)
            drawNode(text: "Get Started\n→ Authentication Sheet", at: getStartedPoint, bold: true)
            let getStartedRect = CGRect(origin: getStartedPoint, size: CGSize(width: nodeWidth, height: nodeHeight))
            drawArrow(from: appLaunchRect, to: getStartedRect)
            currentY += nodeHeight + verticalSpacing
            
            // 2a. Authentication Sheet subnodes: Login, Sign Up (side by side)
            let authSubnodeWidth: CGFloat = 120
            let authSpacing: CGFloat = 40
            let totalAuthWidth = 2 * authSubnodeWidth + authSpacing
            let authStartX = (pageWidth - totalAuthWidth) / 2
            
            let loginPoint = CGPoint(x: authStartX, y: currentY)
            drawNode(text: "Login", at: loginPoint)
            let loginRect = CGRect(origin: loginPoint, size: CGSize(width: authSubnodeWidth, height: nodeHeight))
            
            let signUpPoint = CGPoint(x: authStartX + authSubnodeWidth + authSpacing, y: currentY)
            drawNode(text: "Sign Up", at: signUpPoint)
            let signUpRect = CGRect(origin: signUpPoint, size: CGSize(width: authSubnodeWidth, height: nodeHeight))
            
            // Arrows from Authentication Sheet to Login and Sign Up
            drawArrow(from: getStartedRect, to: loginRect)
            drawArrow(from: getStartedRect, to: signUpRect)
            
            currentY += nodeHeight + verticalSpacing + 20
            
            // 3. Successful Authentication → HomePage (TabView)
            let homePagePoint = CGPoint(x: (pageWidth - nodeWidth)/2, y: currentY)
            drawNode(text: "Successful Authentication\n→ HomePage (TabView)", at: homePagePoint, bold: true)
            let homePageRect = CGRect(origin: homePagePoint, size: CGSize(width: nodeWidth, height: nodeHeight))
            
            // Arrows from Login and Sign Up to HomePage
            drawArrow(from: loginRect, to: homePageRect)
            drawArrow(from: signUpRect, to: homePageRect)
            
            currentY += nodeHeight + verticalSpacing
            
            // 4. Four main tabs branching from HomePage horizontally
            // Layout tabs horizontally centered below HomePage
            
            let tabWidth: CGFloat = 140
            let tabHeight: CGFloat = 50
            let tabSpacing: CGFloat = 40
            let totalTabsWidth = 4 * tabWidth + 3 * tabSpacing
            let tabsStartX = (pageWidth - totalTabsWidth) / 2
            let tabsY = currentY
            
            // Draw "Tab Bar" label above tabs
            let tabBarLabel = "Tab Bar"
            let tabBarFont = UIFont.boldSystemFont(ofSize: 16)
            let tabBarAttributes: [NSAttributedString.Key: Any] = [
                .font: tabBarFont,
                .foregroundColor: UIColor.black
            ]
            let tabBarSize = tabBarLabel.size(withAttributes: tabBarAttributes)
            let tabBarPoint = CGPoint(x: (pageWidth - tabBarSize.width) / 2, y: tabsY - 30)
            tabBarLabel.draw(at: tabBarPoint, withAttributes: tabBarAttributes)
            
            // Tabs nodes
            // Lists Tab
            let listsTabPoint = CGPoint(x: tabsStartX, y: tabsY)
            drawNode(text: "Lists Tab", at: listsTabPoint, bold: true)
            let listsTabRect = CGRect(origin: listsTabPoint, size: CGSize(width: tabWidth, height: tabHeight))
            
            // Deleted Tab
            let deletedTabPoint = CGPoint(x: tabsStartX + (tabWidth + tabSpacing), y: tabsY)
            drawNode(text: "Deleted Tab", at: deletedTabPoint, bold: true)
            let deletedTabRect = CGRect(origin: deletedTabPoint, size: CGSize(width: tabWidth, height: tabHeight))
            
            // Stats Tab
            let statsTabPoint = CGPoint(x: tabsStartX + 2 * (tabWidth + tabSpacing), y: tabsY)
            drawNode(text: "Stats Tab\n(View only)", at: statsTabPoint, bold: true)
            let statsTabRect = CGRect(origin: statsTabPoint, size: CGSize(width: tabWidth, height: tabHeight))
            
            // Profile Tab
            let profileTabPoint = CGPoint(x: tabsStartX + 3 * (tabWidth + tabSpacing), y: tabsY)
            drawNode(text: "Profile Tab", at: profileTabPoint, bold: true)
            let profileTabRect = CGRect(origin: profileTabPoint, size: CGSize(width: tabWidth, height: tabHeight))
            
            // Arrow from HomePage node to center top of Tab Bar area (vertical arrow with a bend)
            let homeToTabsStart = CGPoint(x: homePageRect.midX, y: homePageRect.maxY)
            let tabsCenterX = pageWidth / 2
            let tabsTopY = tabsY
            context.beginPath()
            context.move(to: homeToTabsStart)
            context.addLine(to: CGPoint(x: tabsCenterX, y: homeToTabsStart.y + verticalSpacing / 2))
            context.addLine(to: CGPoint(x: tabsCenterX, y: tabsTopY - 10))
            context.strokePath()
            
            // Arrow head at tabsTopY - 10, centered on tabsCenterX
            let arrowSize: CGFloat = 7
            context.beginPath()
            context.move(to: CGPoint(x: tabsCenterX, y: tabsTopY - 10))
            context.addLine(to: CGPoint(x: tabsCenterX - arrowSize, y: tabsTopY - 10 - arrowSize))
            context.addLine(to: CGPoint(x: tabsCenterX + arrowSize, y: tabsTopY - 10 - arrowSize))
            context.closePath()
            context.fillPath()
            
            // 4a. Lists Tab details: vertical flow below Lists Tab node
            var listsY = listsTabRect.maxY + 25
            let listItemsWidth: CGFloat = 190
            let listItemsHeight: CGFloat = 45
            
            let listItemsPoint = CGPoint(x: listsTabRect.midX - listItemsWidth / 2, y: listsY)
            drawNode(text: "Tap List\n→ ListItemsView\n(Full Screen Cover)", at: listItemsPoint)
            let listItemsRect = CGRect(origin: listItemsPoint, size: CGSize(width: listItemsWidth, height: listItemsHeight))
            drawArrow(from: listsTabRect, to: listItemsRect)
            listsY += listItemsHeight + 25
            
            let plusButtonPoint = CGPoint(x: listsTabRect.midX - listItemsWidth / 2, y: listsY)
            drawNode(text: "'+' Button\n→ Create New List\n(Sheet)", at: plusButtonPoint)
            let plusButtonRect = CGRect(origin: plusButtonPoint, size: CGSize(width: listItemsWidth, height: listItemsHeight))
            drawArrow(from: listItemsRect, to: plusButtonRect)
            listsY += listItemsHeight + 25
            
            let deleteListPoint = CGPoint(x: listsTabRect.midX - listItemsWidth / 2, y: listsY)
            drawNode(text: "Delete List\n→ Delete Alert", at: deleteListPoint)
            let deleteListRect = CGRect(origin: deleteListPoint, size: CGSize(width: listItemsWidth, height: listItemsHeight))
            drawArrow(from: plusButtonRect, to: deleteListRect)
            
            // Back arrows from modals/alerts to their origin
            // Delete Alert back to Lists Tab
            drawVerticalDashedArrow(from: CGPoint(x: deleteListRect.midX, y: deleteListRect.maxY),
                                   to: CGPoint(x: listsTabRect.midX, y: listsTabRect.maxY + 10))
            
            // Create New List Sheet back to Lists Tab
            drawVerticalDashedArrow(from: CGPoint(x: plusButtonRect.midX, y: plusButtonRect.maxY),
                                   to: CGPoint(x: listsTabRect.midX + 10, y: listsTabRect.maxY + 10))
            
            // ListItemsView back to Lists Tab
            drawVerticalDashedArrow(from: CGPoint(x: listItemsRect.midX, y: listItemsRect.maxY),
                                   to: CGPoint(x: listsTabRect.midX - 10, y: listsTabRect.maxY + 10))
            
            // 4b. Deleted Tab details: below Deleted Tab
            var deletedY = deletedTabRect.maxY + 25
            let deletedWidth: CGFloat = 190
            let deletedHeight: CGFloat = 45
            
            let restorePoint = CGPoint(x: deletedTabRect.midX - deletedWidth / 2, y: deletedY)
            drawNode(text: "Restore\n→ Restore Alert", at: restorePoint)
            let restoreRect = CGRect(origin: restorePoint, size: CGSize(width: deletedWidth, height: deletedHeight))
            drawArrow(from: deletedTabRect, to: restoreRect)
            deletedY += deletedHeight + 25
            
            let deleteForeverPoint = CGPoint(x: deletedTabRect.midX - deletedWidth / 2, y: deletedY)
            drawNode(text: "Permanently Delete\n→ Delete Forever Alert", at: deleteForeverPoint)
            let deleteForeverRect = CGRect(origin: deleteForeverPoint, size: CGSize(width: deletedWidth, height: deletedHeight))
            drawArrow(from: restoreRect, to: deleteForeverRect)
            
            // Back arrows from alerts to Deleted Tab
            drawVerticalDashedArrow(from: CGPoint(x: restoreRect.midX, y: restoreRect.maxY),
                                   to: CGPoint(x: deletedTabRect.midX, y: deletedTabRect.maxY + 10))
            drawVerticalDashedArrow(from: CGPoint(x: deleteForeverRect.midX, y: deleteForeverRect.maxY),
                                   to: CGPoint(x: deletedTabRect.midX + 10, y: deletedTabRect.maxY + 10))
            
            // 4c. Stats Tab (view only) - no subnodes
            
            // 4d. Profile Tab details: below Profile Tab
            var profileY = profileTabRect.maxY + 25
            let profileWidth: CGFloat = 190
            let profileHeight: CGFloat = 45
            
            let gitHubSyncPoint = CGPoint(x: profileTabRect.midX - profileWidth / 2, y: profileY)
            drawNode(text: "GitHub Sync\n→ Sheet", at: gitHubSyncPoint)
            let gitHubSyncRect = CGRect(origin: gitHubSyncPoint, size: CGSize(width: profileWidth, height: profileHeight))
            drawArrow(from: profileTabRect, to: gitHubSyncRect)
            profileY += profileHeight + 25
            
            let iCloudSyncPoint = CGPoint(x: profileTabRect.midX - profileWidth / 2, y: profileY)
            drawNode(text: "iCloud Sync\n→ Sheet", at: iCloudSyncPoint)
            let iCloudSyncRect = CGRect(origin: iCloudSyncPoint, size: CGSize(width: profileWidth, height: profileHeight))
            drawArrow(from: gitHubSyncRect, to: iCloudSyncRect)
            profileY += profileHeight + 25
            
            let logoutPoint = CGPoint(x: profileTabRect.midX - profileWidth / 2, y: profileY)
            drawNode(text: "Logout\n→ End (Finish)", at: logoutPoint)
            let logoutRect = CGRect(origin: logoutPoint, size: CGSize(width: profileWidth, height: profileHeight))
            drawArrow(from: iCloudSyncRect, to: logoutRect)
            
            // Back arrows from sheets to Profile Tab
            drawVerticalDashedArrow(from: CGPoint(x: gitHubSyncRect.midX, y: gitHubSyncRect.maxY),
                                   to: CGPoint(x: profileTabRect.midX - 10, y: profileTabRect.maxY + 10))
            drawVerticalDashedArrow(from: CGPoint(x: iCloudSyncRect.midX, y: iCloudSyncRect.maxY),
                                   to: CGPoint(x: profileTabRect.midX + 10, y: profileTabRect.maxY + 10))
            
            // Logout is end point - draw a distinct endpoint style node below logout
            let endPointY = logoutRect.maxY + 50
            let endPointWidth: CGFloat = 140
            let endPointHeight: CGFloat = 45
            let endPointX = profileTabRect.midX - endPointWidth / 2
            
            // Draw arrow logout → end
            let endArrowStart = CGPoint(x: logoutRect.midX, y: logoutRect.maxY)
            let endArrowEnd = CGPoint(x: logoutRect.midX, y: endPointY - 10)
            context.beginPath()
            context.move(to: endArrowStart)
            context.addLine(to: endArrowEnd)
            context.strokePath()
            
            // Arrowhead
            context.beginPath()
            context.move(to: CGPoint(x: logoutRect.midX, y: endPointY - 10))
            context.addLine(to: CGPoint(x: logoutRect.midX - arrowSize, y: endPointY - 10 - arrowSize))
            context.addLine(to: CGPoint(x: logoutRect.midX + arrowSize, y: endPointY - 10 - arrowSize))
            context.closePath()
            context.fillPath()
            
            // Draw End node - distinct style: red background with bold black text
            drawNode(text: "End (Finish)",
                     at: CGPoint(x: endPointX, y: endPointY),
                     width: endPointWidth,
                     height: endPointHeight,
                     fillColor: UIColor.systemRed.withAlphaComponent(0.25),
                     bold: true)
        }
        
        return data
    }
}

// Example usage: Write PDF to documents folder
/*
let pdfData = AppNavigationFlowPDFCreator.createPDF()
let documentDirectories = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)
if let documentDirectory = documentDirectories.first {
    let outputFileURL = documentDirectory.appendingPathComponent("AppNavigationFlowChart.pdf")
    do {
        try pdfData.write(to: outputFileURL)
        print("Saved PDF to: \(outputFileURL.path)")
    } catch {
        print("Error saving PDF: \(error)")
    }
}
*/
